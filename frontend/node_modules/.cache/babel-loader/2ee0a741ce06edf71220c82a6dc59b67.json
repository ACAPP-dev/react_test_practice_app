{"ast":null,"code":"var _jsxFileName = \"/Users/acapp5K1/Desktop/react_test_practice_app/frontend/src/components/TestLoad.js\";\nimport React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nexport default class TestLoad extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: 10,\n      category: \"9\",\n      difficulty: \"medium\"\n    };\n\n    this.makeTestArry = testQuestions => {\n      return testQuestions.map(question => {\n        return this.makeTestQuestionObject(question);\n      });\n    };\n\n    this.makeTestQuestionObject = question => {\n      const randomNum = Math.floor(Math.random() * 4);\n\n      switch (randomNum) {\n        case 0:\n          return {\n            question: question.question,\n            correctAnswerIndex: 0,\n            answers: [question.correct_answer, question.incorrect_answers[0], question.incorrect_answers[1], question.incorrect_answers[2]]\n          };\n\n        case 1:\n          return {\n            question: question.question,\n            correctAnswerIndex: 1,\n            answers: [question.incorrect_answers[1], question.correct_answer, question.incorrect_answers[0], question.incorrect_answers[2]]\n          };\n\n        case 2:\n          return {\n            question: question.question,\n            correctAnswerIndex: 2,\n            answers: [question.incorrect_answers[2], question.incorrect_answers[1], question.correct_answer, question.incorrect_answers[0]]\n          };\n\n        case 3:\n          return {\n            question: question.question,\n            correctAnswerIndex: 3,\n            answers: [question.incorrect_answers[0], question.incorrect_answers[2], question.incorrect_answers[1], question.correct_answer]\n          };\n      }\n    };\n  }\n\n  handleFormChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleLoadTest(event) {\n    event.preventDefault();\n    const testURL = `https://opentdb.com/api.php?amount=${this.state.questions}&category=${this.state.category}&difficulty=${this.state.difficulty}&type=multiple`;\n    fetch(testURL).then(resp => resp.json()).then(json => {\n      console.log(`Results from fetch:`);\n      console.log(json.results); // Need to make array of test questions and return array to TestContainer\n\n      return this.props.returnTestQuestionArry(this.makeTestArry(json.results), json.results[0].category, json.results[0].difficulty, json.results.length); // const testArry = this.makeTestArry(json.results)\n      // console.log('return value of makeTestArry in fetch:')\n      // console.log(testArry)\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, \"Select Parameters for Test\"), /*#__PURE__*/React.createElement(Form, {\n      id: \"formTestParameters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formTestSelectNumber\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, \"Number of Questions\"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: event => this.handleFormChange(event),\n      name: \"questions\",\n      value: this.state.questions,\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 29\n      }\n    }, \"10\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \"15\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, \"20\"))), /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formTestSelectCategory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }, \"Test Category\"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: event => this.handleFormChange(event),\n      name: \"category\",\n      value: this.state.category,\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    }, \"General Knowledge\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 29\n      }\n    }, \"Entertainment: Books\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"11\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 29\n      }\n    }, \"Entertainment: Film\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"17\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }, \"Science & Nature\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"18\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 29\n      }\n    }, \"Science: Computers\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"26\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, \"Celebrities\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"28\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 29\n      }\n    }, \"Vehicles\"))), /*#__PURE__*/React.createElement(Form.Group, {\n      key: \"formCheckDifficulty\",\n      controlId: \"formTestCheckDifficulty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, \"Question Difficulty \"), /*#__PURE__*/React.createElement(Form.Control, {\n      onChange: event => this.handleFormChange(event),\n      name: \"difficulty\",\n      value: this.state.difficulty,\n      as: \"select\",\n      custom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"easy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 29\n      }\n    }, \"Easy\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 29\n      }\n    }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"hard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }, \"Hard\"))), /*#__PURE__*/React.createElement(Button, {\n      onClick: event => this.handleLoadTest(event),\n      variance: \"outline-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, \"Load Test\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/react_test_practice_app/frontend/src/components/TestLoad.js"],"names":["React","Form","Button","TestLoad","Component","state","questions","category","difficulty","makeTestArry","testQuestions","map","question","makeTestQuestionObject","randomNum","Math","floor","random","correctAnswerIndex","answers","correct_answer","incorrect_answers","handleFormChange","event","setState","target","name","value","handleLoadTest","preventDefault","testURL","fetch","then","resp","json","console","log","results","props","returnTestQuestionArry","length","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,eAAe,MAAMC,QAAN,SAAuBH,KAAK,CAACI,SAA7B,CAAuC;AAAA;AAAA;AAAA,SAClDC,KADkD,GAC1C;AACJC,MAAAA,SAAS,EAAE,EADP;AAEJC,MAAAA,QAAQ,EAAE,GAFN;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAD0C;;AAAA,SAOlDC,YAPkD,GAOlCC,aAAD,IAAmB;AAC9B,aAAOA,aAAa,CAACC,GAAd,CAAmBC,QAAD,IAAc;AACnC,eAAO,KAAKC,sBAAL,CAA4BD,QAA5B,CAAP;AAEH,OAHM,CAAP;AAIF,KAZgD;;AAAA,SA2ClDC,sBA3CkD,GA2CxBD,QAAD,IAAc;AAC/B,YAAME,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAlB;;AAEA,cAAOH,SAAP;AACI,aAAK,CAAL;AACI,iBAAO;AAACF,YAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAApB;AACHM,YAAAA,kBAAkB,EAAE,CADjB;AAEHC,YAAAA,OAAO,EAAE,CACLP,QAAQ,CAACQ,cADJ,EAELR,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAFK,EAGLT,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAHK,EAILT,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAJK;AAFN,WAAP;;AASJ,aAAK,CAAL;AACI,iBAAO;AAACT,YAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAApB;AACHM,YAAAA,kBAAkB,EAAE,CADjB;AAEHC,YAAAA,OAAO,EAAE,CACLP,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CADK,EAELT,QAAQ,CAACQ,cAFJ,EAGLR,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAHK,EAILT,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAJK;AAFN,WAAP;;AASJ,aAAK,CAAL;AACI,iBAAO;AAACT,YAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAApB;AACHM,YAAAA,kBAAkB,EAAE,CADjB;AAEHC,YAAAA,OAAO,EAAE,CACLP,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CADK,EAELT,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAFK,EAGLT,QAAQ,CAACQ,cAHJ,EAILR,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAJK;AAFN,WAAP;;AASJ,aAAK,CAAL;AACI,iBAAO;AAACT,YAAAA,QAAQ,EAAEA,QAAQ,CAACA,QAApB;AACHM,YAAAA,kBAAkB,EAAE,CADjB;AAEHC,YAAAA,OAAO,EAAE,CACLP,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CADK,EAELT,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAFK,EAGLT,QAAQ,CAACS,iBAAT,CAA2B,CAA3B,CAHK,EAILT,QAAQ,CAACQ,cAJJ;AAFN,WAAP;AAhCR;AA0CH,KAxF6C;AAAA;;AAclDE,EAAAA,gBAAgB,CAACC,KAAD,EAAQ;AACpB,SAAKC,QAAL,CAAc;AACV,OAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAqBH,KAAK,CAACE,MAAN,CAAaE;AADxB,KAAd;AAGH;;AAEDC,EAAAA,cAAc,CAACL,KAAD,EAAQ;AAClBA,IAAAA,KAAK,CAACM,cAAN;AAEA,UAAMC,OAAO,GAAI,sCAAqC,KAAKzB,KAAL,CAAWC,SAAU,aAAY,KAAKD,KAAL,CAAWE,QAAS,eAAc,KAAKF,KAAL,CAAWG,UAAW,gBAA/I;AAEAuB,IAAAA,KAAK,CAACD,OAAD,CAAL,CACKE,IADL,CACUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADlB,EAEKF,IAFL,CAEUE,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAa,qBAAb;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,OAAjB,EAFU,CAGV;;AACA,aAAO,KAAKC,KAAL,CAAWC,sBAAX,CACH,KAAK9B,YAAL,CAAkByB,IAAI,CAACG,OAAvB,CADG,EAEHH,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgB9B,QAFb,EAGH2B,IAAI,CAACG,OAAL,CAAa,CAAb,EAAgB7B,UAHb,EAIH0B,IAAI,CAACG,OAAL,CAAaG,MAJV,CAAP,CAJU,CAUV;AACA;AACA;AACH,KAfL;AAgBH;;AAiDDC,EAAAA,MAAM,GAAG;AAEL,wBACI,uDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADJ,eAEI,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAC,oBAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,QAAQ,EAAElB,KAAK,IAAI,KAAKD,gBAAL,CAAsBC,KAAtB,CAAjC;AAA+D,MAAA,IAAI,EAAC,WAApE;AAAgF,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWC,SAAlG;AAA6G,MAAA,EAAE,EAAC,QAAhH;AAAyH,MAAA,MAAM,MAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,CAFJ,CADJ,eAUI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,wBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,QAAQ,EAAEiB,KAAK,IAAI,KAAKD,gBAAL,CAAsBC,KAAtB,CAAjC;AAA+D,MAAA,IAAI,EAAC,UAApE;AAA+E,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWE,QAAjG;AAA2G,MAAA,EAAE,EAAC,QAA9G;AAAuH,MAAA,MAAM,MAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,eAEI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFJ,eAGI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHJ,eAII;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAJJ,eAKI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BALJ,eAMI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBANJ,eAOI;AAAQ,MAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,CAFJ,CAVJ,eAsBI,oBAAC,IAAD,CAAM,KAAN;AAAY,MAAA,GAAG,EAAC,qBAAhB;AAAsC,MAAA,SAAS,EAAC,yBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,eAEI,oBAAC,IAAD,CAAM,OAAN;AAAc,MAAA,QAAQ,EAAEgB,KAAK,IAAI,KAAKD,gBAAL,CAAsBC,KAAtB,CAAjC;AAA+D,MAAA,IAAI,EAAC,YAApE;AAAiF,MAAA,KAAK,EAAE,KAAKlB,KAAL,CAAWG,UAAnG;AAA+G,MAAA,EAAE,EAAC,QAAlH;AAA2H,MAAA,MAAM,MAAjI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,MAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,CAFJ,CAtBJ,eA8BI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEe,KAAK,IAAI,KAAKK,cAAL,CAAoBL,KAApB,CAA1B;AAAsD,MAAA,QAAQ,EAAC,cAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA9BJ,CAFJ,CADJ;AAqCH;;AAjIiD","sourcesContent":["import React from 'react'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nexport default class TestLoad extends React.Component {\n    state = {\n        questions: 10,\n        category: \"9\",\n        difficulty: \"medium\",\n    }\n\n    makeTestArry = (testQuestions) => {\n        return testQuestions.map((question) => {\n            return this.makeTestQuestionObject(question)\n\n        })\n     }\n\n    handleFormChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleLoadTest(event) {\n        event.preventDefault()\n\n        const testURL = `https://opentdb.com/api.php?amount=${this.state.questions}&category=${this.state.category}&difficulty=${this.state.difficulty}&type=multiple`\n\n        fetch(testURL)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log(`Results from fetch:`)\n                console.log(json.results)\n                // Need to make array of test questions and return array to TestContainer\n                return this.props.returnTestQuestionArry(\n                    this.makeTestArry(json.results),\n                    json.results[0].category,\n                    json.results[0].difficulty,\n                    json.results.length\n                )\n                // const testArry = this.makeTestArry(json.results)\n                // console.log('return value of makeTestArry in fetch:')\n                // console.log(testArry)\n            })\n    }\n\n    makeTestQuestionObject = (question) => {\n            const randomNum = Math.floor(Math.random() * 4)\n\n            switch(randomNum) {\n                case 0:\n                    return {question: question.question,\n                        correctAnswerIndex: 0, \n                        answers: [\n                            question.correct_answer, \n                            question.incorrect_answers[0], \n                            question.incorrect_answers[1], \n                            question.incorrect_answers[2]\n                        ]\n                    }\n                case 1:\n                    return {question: question.question,\n                        correctAnswerIndex: 1, \n                        answers: [\n                            question.incorrect_answers[1],\n                            question.correct_answer, \n                            question.incorrect_answers[0],  \n                            question.incorrect_answers[2]\n                        ]\n                    }\n                case 2:\n                    return {question: question.question,\n                        correctAnswerIndex: 2, \n                        answers: [\n                            question.incorrect_answers[2],\n                            question.incorrect_answers[1],\n                            question.correct_answer, \n                            question.incorrect_answers[0]\n                        ]\n                    }\n                case 3:\n                    return {question: question.question,\n                        correctAnswerIndex: 3, \n                        answers: [\n                            question.incorrect_answers[0],\n                            question.incorrect_answers[2],\n                            question.incorrect_answers[1],\n                            question.correct_answer\n                        ]\n                    }\n            }\n        }\n\n    render() {\n\n        return (\n            <>\n                <h2>Select Parameters for Test</h2>\n                <Form id='formTestParameters'>\n                    <Form.Group controlId='formTestSelectNumber'>\n                        <Form.Label>Number of Questions</Form.Label>\n                        <Form.Control onChange={event => this.handleFormChange(event)} name='questions' value={this.state.questions} as='select' custom>\n                            <option>5</option>\n                            <option>10</option>\n                            <option>15</option>\n                            <option>20</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId='formTestSelectCategory'>\n                        <Form.Label>Test Category</Form.Label>\n                        <Form.Control onChange={event => this.handleFormChange(event)} name='category' value={this.state.category} as='select' custom>\n                            <option value='9'>General Knowledge</option>\n                            <option value='10'>Entertainment: Books</option>\n                            <option value='11'>Entertainment: Film</option>\n                            <option value='17'>Science & Nature</option>\n                            <option value='18'>Science: Computers</option>\n                            <option value='26'>Celebrities</option>\n                            <option value='28'>Vehicles</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group key='formCheckDifficulty' controlId='formTestCheckDifficulty'>\n                        <Form.Label>Question Difficulty </Form.Label>\n                        <Form.Control onChange={event => this.handleFormChange(event)} name='difficulty' value={this.state.difficulty} as='select' custom>\n                            <option value='easy'>Easy</option>\n                            <option value='medium'>Medium</option>\n                            <option value='hard'>Hard</option>\n                        </Form.Control>\n                    </Form.Group>\n                    <Button onClick={event => this.handleLoadTest(event)} variance='outline-info'>Load Test</Button>\n                </Form>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}