{"ast":null,"code":"var _jsxFileName = \"/Users/acapp5K1/Desktop/react_test_practice_app/frontend/src/components/TestCard.js\";\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nexport default class TestCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = event => {\n      const questionNumber = event.target.getAttribute('data-question');\n      const submittedAnswer = event.target.getAttribute('data-answer');\n      const correctAnswer = this.props.testData.testData[event.target.getAttribute('data-question')].correct_answer;\n      const newTestResultArry = this.state.testResult;\n\n      if (submittedAnswer === correctAnswer) {\n        console.log('Correct Answer!');\n        newTestResultArry[questionNumber] = {\n          correct: 1,\n          answer: submittedAnswer\n        };\n        this.setState({\n          testResult: newTestResultArry\n        });\n        event.currentTarget.parentElement.classname = 'correct';\n      } else {\n        console.log('Incorrect Answer!!');\n        newTestResultArry[questionNumber] = {\n          correct: 0,\n          answer: submittedAnswer\n        };\n        this.setState({\n          testResult: newTestResultArry\n        });\n      }\n    };\n  }\n\n  createTestCard(cardData, questionIndex) {\n    const randomNum = Math.floor(Math.random() * 4);\n    let questionObj = {};\n\n    switch (randomNum) {\n      case 0:\n        questionObj = {\n          answer: 0,\n          questions: [cardData.correct_answer, cardData.incorrect_answers[0], cardData.incorrect_answers[1], cardData.incorrect_answers[2]]\n        };\n        break;\n\n      case 1:\n        questionObj = {\n          answer: 1,\n          questions: [cardData.incorrect_answers[1], cardData.correct_answer, cardData.incorrect_answers[0], cardData.incorrect_answers[2]]\n        };\n        break;\n\n      case 2:\n        questionObj = {\n          answer: 2,\n          questions: [cardData.incorrect_answers[2], cardData.incorrect_answers[1], cardData.correct_answer, cardData.incorrect_answers[0]]\n        };\n        break;\n\n      case 3:\n        questionObj = {\n          answer: 3,\n          questions: [cardData.incorrect_answers[0], cardData.incorrect_answers[2], cardData.incorrect_answers[1], cardData.correct_answer]\n        };\n        break;\n    }\n\n    return /*#__PURE__*/React.createElement(Card, {\n      key: questionIndex,\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }, cardData.question), /*#__PURE__*/React.createElement(ListGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, questionObj.questions.map((question, index) => {\n      return /*#__PURE__*/React.createElement(ListGroup.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        \"data-question\": questionIndex,\n        \"data-answer\": question,\n        onClick: this.handleClick,\n        variant: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 37\n        }\n      }, index + 1), ' ', question);\n    }))));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n}","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/react_test_practice_app/frontend/src/components/TestCard.js"],"names":["React","Card","Button","ListGroup","TestCard","Component","handleClick","event","questionNumber","target","getAttribute","submittedAnswer","correctAnswer","props","testData","correct_answer","newTestResultArry","state","testResult","console","log","correct","answer","setState","currentTarget","parentElement","classname","createTestCard","cardData","questionIndex","randomNum","Math","floor","random","questionObj","questions","incorrect_answers","question","map","index","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAEA,eAAe,MAAMC,QAAN,SAAuBJ,KAAK,CAACK,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SAkElDC,WAlEkD,GAkEnCC,KAAD,IAAW;AACrB,YAAMC,cAAc,GAAGD,KAAK,CAACE,MAAN,CAAaC,YAAb,CAA0B,eAA1B,CAAvB;AACA,YAAMC,eAAe,GAAGJ,KAAK,CAACE,MAAN,CAAaC,YAAb,CAA0B,aAA1B,CAAxB;AACA,YAAME,aAAa,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBA,QAApB,CAA6BP,KAAK,CAACE,MAAN,CAAaC,YAAb,CAA0B,eAA1B,CAA7B,EAAyEK,cAA/F;AACA,YAAMC,iBAAiB,GAAG,KAAKC,KAAL,CAAWC,UAArC;;AAEA,UAAIP,eAAe,KAAKC,aAAxB,EAAuC;AACnCO,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEAJ,QAAAA,iBAAiB,CAACR,cAAD,CAAjB,GAAoC;AAChCa,UAAAA,OAAO,EAAE,CADuB;AAEhCC,UAAAA,MAAM,EAAEX;AAFwB,SAApC;AAKA,aAAKY,QAAL,CAAc;AAACL,UAAAA,UAAU,EAAEF;AAAb,SAAd;AACAT,QAAAA,KAAK,CAACiB,aAAN,CAAoBC,aAApB,CAAkCC,SAAlC,GAA8C,SAA9C;AACH,OAVD,MAUO;AACHP,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAJ,QAAAA,iBAAiB,CAACR,cAAD,CAAjB,GAAoC;AAChCa,UAAAA,OAAO,EAAE,CADuB;AAEhCC,UAAAA,MAAM,EAAEX;AAFwB,SAApC;AAKA,aAAKY,QAAL,CAAc;AAACL,UAAAA,UAAU,EAAEF;AAAb,SAAd;AAEH;AACJ,KA5FiD;AAAA;;AAElDW,EAAAA,cAAc,CAACC,QAAD,EAAWC,aAAX,EAA0B;AACpC,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,YAAOJ,SAAP;AACI,WAAK,CAAL;AACII,QAAAA,WAAW,GAAG;AAACZ,UAAAA,MAAM,EAAE,CAAT;AACVa,UAAAA,SAAS,EAAE,CACPP,QAAQ,CAACb,cADF,EAEPa,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAFO,EAGPR,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAHO,EAIPR,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAJO;AADD,SAAd;AAQA;;AACJ,WAAK,CAAL;AACIF,QAAAA,WAAW,GAAG;AAACZ,UAAAA,MAAM,EAAE,CAAT;AACVa,UAAAA,SAAS,EAAE,CACPP,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CADO,EAEPR,QAAQ,CAACb,cAFF,EAGPa,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAHO,EAIPR,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAJO;AADD,SAAd;AAQJ;;AACA,WAAK,CAAL;AACIF,QAAAA,WAAW,GAAG;AAACZ,UAAAA,MAAM,EAAE,CAAT;AACVa,UAAAA,SAAS,EAAE,CACPP,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CADO,EAEPR,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAFO,EAGPR,QAAQ,CAACb,cAHF,EAIPa,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAJO;AADD,SAAd;AAQJ;;AACA,WAAK,CAAL;AACIF,QAAAA,WAAW,GAAG;AAACZ,UAAAA,MAAM,EAAE,CAAT;AACVa,UAAAA,SAAS,EAAE,CACPP,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CADO,EAEPR,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAFO,EAGPR,QAAQ,CAACQ,iBAAT,CAA2B,CAA3B,CAHO,EAIPR,QAAQ,CAACb,cAJF;AADD,SAAd;AAQJ;AAxCJ;;AA0CA,wBACI,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEc,aAAX;AAA0B,MAAA,SAAS,EAAC,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,QAAQ,CAACS,QAAtB,CADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKH,WAAW,CAACC,SAAZ,CAAsBG,GAAtB,CAA0B,CAACD,QAAD,EAAWE,KAAX,KAAqB;AAC5C,0BACI,oBAAC,SAAD,CAAW,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,MAAD;AAAQ,yBAAeV,aAAvB;AAAsC,uBAAaQ,QAAnD;AAA6D,QAAA,OAAO,EAAE,KAAK/B,WAA3E;AAAwF,QAAA,OAAO,EAAC,WAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6GiC,KAAK,GAAG,CAArH,CADJ,EACqI,GADrI,EAEKF,QAFL,CADJ;AAKH,KANA,CADL,CAFJ,CADJ,CADJ;AAgBH;;AA8BDG,EAAAA,MAAM,GAAG;AACL,wBACI,yCADJ;AAKH;;AApGiD","sourcesContent":["import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nexport default class TestCard extends React.Component {\n\n    createTestCard(cardData, questionIndex) {\n        const randomNum = Math.floor(Math.random() * 4)\n        let questionObj = {}\n\n        switch(randomNum) {\n            case 0:\n                questionObj = {answer: 0, \n                    questions: [\n                        cardData.correct_answer, \n                        cardData.incorrect_answers[0], \n                        cardData.incorrect_answers[1], \n                        cardData.incorrect_answers[2]\n                    ]\n                }\n                break;\n            case 1:\n                questionObj = {answer: 1, \n                    questions: [\n                        cardData.incorrect_answers[1],\n                        cardData.correct_answer, \n                        cardData.incorrect_answers[0],  \n                        cardData.incorrect_answers[2]\n                    ]\n                }\n            break;\n            case 2:\n                questionObj = {answer: 2, \n                    questions: [\n                        cardData.incorrect_answers[2],\n                        cardData.incorrect_answers[1],\n                        cardData.correct_answer, \n                        cardData.incorrect_answers[0]\n                    ]\n                }\n            break;\n            case 3:\n                questionObj = {answer: 3, \n                    questions: [\n                        cardData.incorrect_answers[0],\n                        cardData.incorrect_answers[2],\n                        cardData.incorrect_answers[1],\n                        cardData.correct_answer\n                    ]\n                }\n            break;\n        }\n        return (\n            <Card key={questionIndex} className='card'>\n                <Card.Body>\n                    <Card.Title>{cardData.question}</Card.Title>\n                    <ListGroup>\n                        {questionObj.questions.map((question, index) => {\n                            return(\n                                <ListGroup.Item>\n                                    <Button data-question={questionIndex} data-answer={question} onClick={this.handleClick} variant='secondary'>{index + 1}</Button>{' '}\n                                    {question}\n                                </ListGroup.Item>)\n                        })}\n                    </ListGroup>\n                </Card.Body>\n            </Card>\n        )\n    }\n\n    handleClick = (event) => {\n        const questionNumber = event.target.getAttribute('data-question')\n        const submittedAnswer = event.target.getAttribute('data-answer')\n        const correctAnswer = this.props.testData.testData[event.target.getAttribute('data-question')].correct_answer\n        const newTestResultArry = this.state.testResult\n\n        if (submittedAnswer === correctAnswer) {\n            console.log('Correct Answer!')\n            \n            newTestResultArry[questionNumber] = {\n                correct: 1,\n                answer: submittedAnswer\n            }\n\n            this.setState({testResult: newTestResultArry})\n            event.currentTarget.parentElement.classname = 'correct'\n        } else {\n            console.log('Incorrect Answer!!')\n            newTestResultArry[questionNumber] = {\n                correct: 0,\n                answer: submittedAnswer\n            }\n\n            this.setState({testResult: newTestResultArry})\n            \n        }\n    }\n\n    render() {\n        return (\n            <>\n               \n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}