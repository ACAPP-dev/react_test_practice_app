{"ast":null,"code":"var _jsxFileName = \"/Users/acapp5K1/Desktop/react_test_practice_app/frontend/src/containers/TestContainer.js\";\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport NavBarComponent from '../components/NavBar';\nimport User from '../components/User';\nimport TestLoad from '../components/TestLoad';\nimport TestCard from '../components/TestCard';\nimport Result from '../components/Result';\nexport default class TestContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {},\n      testId: \"\",\n      testSubject: \"\",\n      testDifficulty: \"\",\n      testLength: 0,\n      testQuestions: [],\n      testResult: []\n    };\n\n    this.handleTestData = (testQuestionArry, testSubject, testDifficulty, testLength) => {\n      this.setState({\n        testId: Math.floor(Math.random() * 100),\n        testQuestions: testQuestionArry,\n        testSubject: testSubject,\n        testDifficulty: testDifficulty,\n        testLength: testLength\n      });\n      console.log('TestContainer State after fetch and create questions array:');\n      console.log(this.state);\n    };\n\n    this.createCards = () => {\n      return this.state.testQuestions.map((card, index) => {\n        return /*#__PURE__*/React.createElement(TestCard, {\n          returnAnswerClick: this.handleAnswerClick,\n          cardData: card,\n          questionIndex: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }\n        });\n      });\n    };\n\n    this.handleAnswerClick = event => {\n      const questionNumber = event.target.getAttribute('data-question');\n\n      if (!this.state.testResult[questionNumber]) {\n        const submittedAnswer = event.target.getAttribute('data-answer');\n        const correctAnswerNumber = this.state.testQuestions[questionNumber].correctAnswerIndex;\n        const correctAnswer = this.state.testQuestions[questionNumber].answers[correctAnswerNumber];\n        const newTestResultArry = this.state.testResult;\n\n        if (submittedAnswer === correctAnswer) {\n          console.log('Correct Answer!');\n          newTestResultArry[questionNumber] = {\n            correct: 1,\n            answer: submittedAnswer\n          };\n          this.setState({\n            testResult: newTestResultArry\n          });\n          event.currentTarget.parentElement.classList.add('correct');\n        } else {\n          console.log('Incorrect Answer!!');\n          newTestResultArry[questionNumber] = {\n            correct: 0,\n            answer: submittedAnswer\n          };\n          this.setState({\n            testResult: newTestResultArry\n          });\n          event.currentTarget.parentElement.classList.add('wrong');\n        }\n      }\n    };\n\n    this.handleUserData = data => {\n      this.setState({\n        user: data\n      });\n      console.log(this.state.user);\n    };\n\n    this.displayResults = () => {\n      if (this.state.testResult.length > 0 && this.state.testResult.length === this.state.testQuestions.length) {\n        const questionsCorrect = this.state.testResult.filter(question => {\n          return question.correct === 1;\n        });\n        const calcScore = questionsCorrect.length / this.state.testResult.length;\n        const configObj = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n          },\n          Body: JSON.stringify({\n            test_id: this.state.testId,\n            test_subject: this.state.testSubject,\n            test_difficulty: this.state.test_difficulty,\n            test_score: calcScore\n          })\n        }; //need to complete fetch to post test results to user\n\n        return /*#__PURE__*/React.createElement(Result, {\n          returnResult: this.saveResult,\n          correct: questionsCorrect.length,\n          score: calcScore,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 20\n          }\n        });\n      }\n    };\n\n    this.saveResult = () => {\n      console.log(\"Result Saved!!!\");\n      console.log(this.state.testId);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }, this.displayResults()), /*#__PURE__*/React.createElement(TestLoad, {\n      returnTestQuestionArry: this.handleTestData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }\n    }, `Test Your Knowledge of: need from state`), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, this.createCards()));\n  }\n\n}","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/react_test_practice_app/frontend/src/containers/TestContainer.js"],"names":["React","Button","NavBarComponent","User","TestLoad","TestCard","Result","TestContainer","Component","state","user","testId","testSubject","testDifficulty","testLength","testQuestions","testResult","handleTestData","testQuestionArry","setState","Math","floor","random","console","log","createCards","map","card","index","handleAnswerClick","event","questionNumber","target","getAttribute","submittedAnswer","correctAnswerNumber","correctAnswerIndex","correctAnswer","answers","newTestResultArry","correct","answer","currentTarget","parentElement","classList","add","handleUserData","data","displayResults","length","questionsCorrect","filter","question","calcScore","configObj","method","headers","Body","JSON","stringify","test_id","test_subject","test_difficulty","test_score","saveResult","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport NavBarComponent from '../components/NavBar'\nimport User from '../components/User'\nimport TestLoad from '../components/TestLoad'\nimport TestCard from '../components/TestCard'\nimport Result from '../components/Result'\n\nexport default class TestContainer extends React.Component {\n    \n    state = {\n        user: {},\n        testId: \"\",\n        testSubject: \"\",\n        testDifficulty: \"\",\n        testLength: 0,\n        testQuestions: [],\n        testResult: []\n\n    }\n\n    handleTestData = (testQuestionArry, testSubject, testDifficulty, testLength) => {\n        this.setState({\n            testId: Math.floor(Math.random() * 100),\n            testQuestions: testQuestionArry,\n            testSubject: testSubject,\n            testDifficulty: testDifficulty,\n            testLength: testLength\n        })\n        console.log('TestContainer State after fetch and create questions array:')\n        console.log(this.state)\n    }\n\n    createCards = () => {\n        return this.state.testQuestions.map((card, index) => {\n            \n            return (\n                < TestCard returnAnswerClick={this.handleAnswerClick} cardData={card} questionIndex={index} />\n            )\n        })\n    }\n\n    handleAnswerClick = (event) => {\n        const questionNumber = event.target.getAttribute('data-question')\n        \n        if (!this.state.testResult[questionNumber]) {\n            const submittedAnswer = event.target.getAttribute('data-answer')\n            const correctAnswerNumber = this.state.testQuestions[questionNumber].correctAnswerIndex\n            const correctAnswer = this.state.testQuestions[questionNumber].answers[correctAnswerNumber]\n            const newTestResultArry = this.state.testResult\n\n            if (submittedAnswer === correctAnswer) {\n                console.log('Correct Answer!')\n                \n                newTestResultArry[questionNumber] = {\n                    correct: 1,\n                    answer: submittedAnswer\n                }\n\n                this.setState({testResult: newTestResultArry})\n                event.currentTarget.parentElement.classList.add('correct')\n\n               \n            } else {\n                console.log('Incorrect Answer!!')\n                newTestResultArry[questionNumber] = {\n                    correct: 0,\n                    answer: submittedAnswer\n                }\n\n                this.setState({testResult: newTestResultArry})\n                event.currentTarget.parentElement.classList.add('wrong')\n            }\n           \n        }\n    }\n\n    handleUserData = (data) => {\n        this.setState({user: data})\n        console.log(this.state.user)\n\n    }\n\n    displayResults = () => {\n        if (this.state.testResult.length > 0 && this.state.testResult.length === this.state.testQuestions.length) {\n            const questionsCorrect = this.state.testResult.filter(question => {\n                \n                return question.correct === 1\n            })\n            const calcScore = questionsCorrect.length / this.state.testResult.length\n\n            const configObj = {\n                method: \"POST\",\n                headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                Body: JSON.stringify({\n                    test_id: this.state.testId,\n                    test_subject: this.state.testSubject,\n                    test_difficulty: this.state.test_difficulty,\n                    test_score: calcScore\n                })\n            }\n\n            //need to complete fetch to post test results to user\n\n            return < Result returnResult={this.saveResult} correct={questionsCorrect.length} score={calcScore} />\n        }\n    }\n\n    saveResult = () => {\n        console.log(\"Result Saved!!!\")\n        console.log(this.state.testId)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"form\">\n                    {this.displayResults()}\n                   \n                </div>\n\n                < TestLoad returnTestQuestionArry={this.handleTestData} />\n                <h2>{`Test Your Knowledge of: need from state`}</h2>\n                <div>\n                    {this.createCards()}\n                </div>\n               \n            </div>\n        )\n    }\n\n\n\n\n}"]},"metadata":{},"sourceType":"module"}